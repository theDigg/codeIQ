const challenge = {
  _id: 'so7zJKE4H7BiQwGJm',
  type: 'codewriting',
  generalType: 'algorithmic',
  sourceName: 'nQueensGolf',
  name: 'nQueensGolf_codewriting',
  description:
    'Given a number `n`, return the number of possible ways that you can place `n` queens on an `n x n` chessboard such that no queen can attack another. **example** ```js [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0]] ``` The above example (where `n = 4`) shows one possible game state where n queens (each represented as a `1`) are in positions where they cannot attack each other',
  authorId: '8QwhpH5wS5mKhTsRi',
  authorSolution: {
    sources: [
      {
        source:
          'nQueensGolf = n => { c = 0 d = Math.pow(2,n) - 1 i = (x, y, z) => { if (y == d) { c++ return } let p = ~(x|z|y) while (p & d) { b = p & -p p -= b i((x|b)>>1, y|b, (z|b)<<1) } } i(0,0,0) return c }',
        language: 'js',
      },
    ],
  },
  source:
    'nQueensGolf = n => { c = 0 d = Math.pow(2,n) - 1 i = (x, y, z) => { if (y == d) { c++ return } let p = ~(x|z|y) while (p & d) { b = p & -p p -= b i((x|b)>>1, y|b, (z|b)<<1) } } i(0,0,0) return c }',
  language: 'js',
  createdBy: '8QwhpH5wS5mKhTsRi',
  date: 1630185772956,
  status: 'approved',
  origin: 'codefights',
  defaultLiveInterviewTask: false,
  tags: [],
  io: {
    input: [
      {
        description: 'An integer representing the number of queens to place on a `n x n` chessboard.',
        name: 'n',
        type: 'integer',
        description: 'An integer representing the number of possible `n x n` board states such that n-queens cannot attack each other.',
        type: 'integer',
      },
    ],
    output: {
      description: 'An integer representing the number of possible `n x n` board states such that n-queens cannot attack each other.',
      type: 'integer',
    },
    tests: [
      {
        id: 1,
        input: [1],
        output: 1,
      },
      {
        id: 2,
        input: [2],
        output: 0,
      },
    ],
    sampleTestCount: null,
    enableNetwork: true,
    timeLimits: {
      clj: 21000,
      coffee: 10000,
      lisp: 11000,
      c: 4000,
      cpp: 4000,
      cs: 8000,
      d: 7000,
      dart: 9000,
      exs: 17000,
      erl: 15000,
      pas: 9000,
      for: 4000,
      fs: 8000,
      go: 9000,
      groovy: 11000,
      hs: 9000,
      java: 8000,
      js: 9000,
      jl: 12000,
      kt: 8000,
      lua: 8000,
      nim: 4000,
      objc: 10000,
      ocaml: 7000,
      octave: 37000,
      perl: 9000,
      php: 9000,
      py: 9000,
      py3: 9000,
      r: 10000,
      rb: 9000,
      rs: 7000,
      scala: 25000,
      st: 14000,
      swift: 10000,
      tcl: 10000,
      ts: 13000,
      vb: 9000,
    },
    hasAuthorSolution: true,
    stats: {
      solveTimeStats: {
        totalSolveTime: 24157468,
        userCount: 5,
      },
      submissionStats: {
        successful: 5,
        unsuccessful: 0,
      },
    },
    scheduledStatsUpdate: 1630186498215,
  },
};
